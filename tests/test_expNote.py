# generated by gemini

import pytest
import pandas as pd
from pathlib import Path
from ammonkey.core.daet import DAET, Task
from ammonkey.core.expNote import ExpNote

# This is the central fixture that builds a temporary, fake experiment directory.
# All tests will use this fixture to get a clean, predictable environment.
@pytest.fixture
def exp_note_setup(tmp_path: Path) -> Path:
    """
    Creates a temporary directory structure, a mock Excel file, and dummy video files
    to robustly test the ExpNote class.
    """
    # 1. Define paths
    date_str = '20250728'
    animal_name = 'Pici'
    session_path = tmp_path / animal_name / '2025' / '07' / date_str
    excel_path = session_path / f'{animal_name}_{date_str}.xlsx'

    # 2. Create directory structure
    session_path.mkdir(parents=True, exist_ok=True)
    for i in range(1, 5):
        (session_path / f'cam{i}').mkdir()

    # 3. Create mock video files
    (session_path / 'cam1' / 'C0001.mp4').touch()
    (session_path / 'cam2' / 'C0002.mp4').touch()
    (session_path / 'cam4' / 'C0004.mp4').touch()
    # Note: cam3/C0003.mp4 is intentionally omitted to test existence checks

    # 4. Create mock data for the Excel file
    # This data covers many edge cases: duplicates, voided entries, calib, missing values.
    mock_data = {
        'Experiment': ['TS', 'TS', 'BBT', 'BRKM', 'PULL_calib', 'BadRow', 'TS_VOID'],
        'Task': ['1', '1', '2', '3', '4', '5', '6'],
        'Camera files \n(1 LR)': [1, 5, 6, 7, 8, 9, 10],
        'Camera files \n(2 LL)': [2, '-', 7, 8, 9, '', 11],
        'Camera files (3 RR)': [3, 6, 8, 9, 10, 'error', 12], # C0003.mp4 does not exist
        'Camera files (4 RL)': [4, 7, 9, 10, 11, 'dog-bitten', 13],
        'VOID': [None, None, None, None, None, None, 'T']
    }
    df = pd.DataFrame(mock_data)

    # 5. Write the mock Excel file, including junk rows to test header detection
    with pd.ExcelWriter(excel_path) as writer:
        pd.DataFrame(['Junk', 'Data']).to_excel(writer, index=False, header=False)
        df.to_excel(writer, index=False, sheet_name='Sheet1')

    return session_path


# Group all tests for ExpNote into a class for better organization.
class TestExpNote:

    def test_initialization_success(self, exp_note_setup: Path):
        """Tests successful loading, parsing of animal/date, and DataFrame creation."""
        notes = ExpNote(exp_note_setup)
        assert notes.animal == 'Pici'
        assert notes.date == '20250728'
        assert isinstance(notes.df, pd.DataFrame)
        assert len(notes.df) == 7 # Should load all valid rows

    def test_file_not_found(self, tmp_path: Path):
        """Tests that a FileNotFoundError is raised if the xlsx file is missing."""
        bad_path = tmp_path / 'non_existent'
        bad_path.mkdir()
        with pytest.raises(FileNotFoundError):
            ExpNote(bad_path)

    def test_rename_duplicate_daets(self, exp_note_setup: Path):
        """Tests that duplicate DAETs are correctly renamed with suffixes like (1), (2)."""
        notes = ExpNote(exp_note_setup)
        # The first two rows had the same 'TS' and '1'
        tasks = notes.df['Task'].tolist()
        assert '1 (1)' in tasks
        assert '1 (2)' in tasks
        
        # Check that the DAET objects themselves were updated
        daet_strs = [str(d) for d in notes.daets]
        assert '20250728-Pici-TS-1 (1)' in daet_strs
        assert '20250728-Pici-TS-1 (2)' in daet_strs

    def test_get_vid_set_idx_and_paths(self, exp_note_setup: Path):
        """Tests retrieval of video IDs and their corresponding file paths."""
        notes = ExpNote(exp_note_setup)
        daet = notes.daets[0] # The first DAET: 20250728-Pici-TS-1 (1)

        # Check video IDs
        vid_ids = notes.getVidSetIdx(daet)
        assert vid_ids == [1, 2, 3, 4]

        # Check corresponding file paths
        vid_paths = notes.getVidSetPaths(daet)
        assert vid_paths[0].name == 'C0001.mp4'
        assert vid_paths[1].name == 'C0002.mp4'
        assert vid_paths[2] is None  # C0003.mp4 doesn't exist
        assert vid_paths[3].name == 'C0004.mp4'

    def test_get_vid_set_with_skip_marker(self, exp_note_setup: Path):
        """Tests that skip markers ('-') in the Excel file result in None."""
        notes = ExpNote(exp_note_setup)
        daet_with_skip = notes.daets[1] # The second DAET: 20250728-Pici-TS-1 (2)
        vid_ids = notes.getVidSetIdx(daet_with_skip)
        assert vid_ids[1] is None # The second camera file was '-'

    def test_check_video_existence(self, exp_note_setup: Path):
        """Tests the dictionary of video file existence."""
        notes = ExpNote(exp_note_setup)
        daet = notes.daets[0]
        existence = notes.checkVideoExistence(daet)
        assert existence == {0: True, 1: True, 2: False, 3: True}

    def test_get_calibs(self, exp_note_setup: Path):
        """Tests retrieval of calibration DAETs."""
        notes = ExpNote(exp_note_setup)
        calib_daets = notes.getCalibs()
        assert len(calib_daets) == 1
        assert calib_daets[0].experiment == 'PULL_calib'

    def test_is_daet_void(self, exp_note_setup: Path):
        """Tests the 'is_void' check."""
        notes = ExpNote(exp_note_setup)
        void_daet = next(d for d in notes.daets if d.experiment == 'TS_VOID')
        non_void_daet = notes.daets[0]
        assert notes.is_daet_void(void_daet) == True
        assert notes.is_daet_void(non_void_daet) == False

    def test_get_valid_daets(self, exp_note_setup: Path):
        """Tests filtering for processable DAETs (enough videos, not void)."""
        notes = ExpNote(exp_note_setup)
        # Expected: 4 valid DAETs.
        # - The 2nd 'TS' row has only 1 video ID after skipping '-'.
        # - 'BadRow' has no existing video files.
        # - 'TS_VOID' is void.
        valid_daets = notes.getValidDaets(min_videos=2)
        assert len(valid_daets) == 5

    def test_filter_by_task(self, exp_note_setup: Path):
        """Tests filtering the main DataFrame by task type."""
        notes = ExpNote(exp_note_setup)
        ts_df = notes.filterByTask(Task.TS)
        assert len(ts_df) == 3 # 'TS', 'TS', 'TS_VOID'
        assert all(ts_df['Experiment'].str.contains('TS'))

    def test_duplication_with_whitelist(self, exp_note_setup: Path):
        """Tests creating a new ExpNote instance with only a whitelist of DAETs."""
        notes = ExpNote(exp_note_setup)
        whitelist = [notes.daets[0], notes.daets[2]]
        
        new_note = notes.dupWithWhiteList(whitelist)
        
        assert len(new_note.daets) == 2
        assert new_note.daets[0] == whitelist[0]
        assert new_note.daets[1] == whitelist[1]
        assert new_note.animal == notes.animal # Make sure other properties are intact

    def test_summary(self, exp_note_setup: Path):
        """Tests the summary dictionary generation."""
        notes = ExpNote(exp_note_setup)
        summary = notes.getSummary()
        assert summary['total_entries'] == 7
        assert summary['void_entries'] == 1
        assert summary['calibration_entries'] == 1
        assert summary['processable_entries'] == 5